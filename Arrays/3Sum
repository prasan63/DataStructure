Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
============================================================================================================================

Solution
========


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
      
      List<List<Integer>> ans = new ArrayList<>();
      Arrays.sort(nums);

      for (int i = 0; i < nums.length - 2; i++){
          if(i>0 && nums[i] == nums[i-1])
          continue; // If previous value and current value is same going back to loop again

          int j = i +1;
          int k = nums.length - 1;
          int sum = nums[i]+nums[j]+nums[k];

          while(j<k){
              if(sum == 0){
              ans.add(Arrays.asList(nums[i],nums[j],nums[k]));
              //Checking for duplicates
              while(j<k && nums[j] == nums[j+1]){
                  j++;
              }
              //checking for duplicates
              while(j<k && nums[k] == nums[k-1]){
                  k--;
              }
              //Moving pointers
              j++;
              k--;
              }
              if(sum > 0)
              j++;
              if (sum < 0)
              k--;
                       
            }
      }
      return ans;
    }
}
